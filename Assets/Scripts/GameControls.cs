//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""SwitchCam"",
            ""id"": ""5aacdfc5-6f18-4a32-a979-0811c30556f3"",
            ""actions"": [
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""43f697ed-c7c9-40d6-97e4-15de30aeeeea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f2dd6825-dd0d-41d4-9a20-7bd61e6d2fb4"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9960dfaf-0c48-489c-9d17-8958fc5bb035"",
                    ""path"": ""<Keyboard>/numpadEquals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SwitchCam
        m_SwitchCam = asset.FindActionMap("SwitchCam", throwIfNotFound: true);
        m_SwitchCam_Switch = m_SwitchCam.FindAction("Switch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwitchCam
    private readonly InputActionMap m_SwitchCam;
    private List<ISwitchCamActions> m_SwitchCamActionsCallbackInterfaces = new List<ISwitchCamActions>();
    private readonly InputAction m_SwitchCam_Switch;
    public struct SwitchCamActions
    {
        private @GameControls m_Wrapper;
        public SwitchCamActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Switch => m_Wrapper.m_SwitchCam_Switch;
        public InputActionMap Get() { return m_Wrapper.m_SwitchCam; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwitchCamActions set) { return set.Get(); }
        public void AddCallbacks(ISwitchCamActions instance)
        {
            if (instance == null || m_Wrapper.m_SwitchCamActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwitchCamActionsCallbackInterfaces.Add(instance);
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        private void UnregisterCallbacks(ISwitchCamActions instance)
        {
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        public void RemoveCallbacks(ISwitchCamActions instance)
        {
            if (m_Wrapper.m_SwitchCamActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwitchCamActions instance)
        {
            foreach (var item in m_Wrapper.m_SwitchCamActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwitchCamActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwitchCamActions @SwitchCam => new SwitchCamActions(this);
    public interface ISwitchCamActions
    {
        void OnSwitch(InputAction.CallbackContext context);
    }
}
